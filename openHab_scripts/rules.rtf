{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red57\green192\blue38;\red0\green0\blue0;\red219\green39\blue218;
\red86\green32\blue244;\red56\green185\blue199;\red170\green171\blue37;\red202\green51\blue35;}
{\*\expandedcolortbl;;\cssrgb\c25704\c77963\c19556;\csgray\c0;\cssrgb\c89513\c29738\c88483;
\cssrgb\c41680\c25960\c96645;\cssrgb\c25544\c77008\c82022;\cssrgb\c72330\c71683\c18597;\cssrgb\c83898\c28665\c18024;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs22 \cf2 \CocoaLigature0 //Define a rule for handling incomming data
\f1\b0 \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 rule\cf3  
\f0\b \cf5 "Arduino_RX"
\f1\b0 \cf3 \
\
 \cf4 when\cf3 \
\
     \cf4 Item\cf3  Arduino \cf4 received\cf3  \cf4 update\cf3 \
\
 \cf4 then\cf3 \
\
      
\f0\b \cf2 //logInfo("Arduino.rules", "Data Received: " + Arduino.state.toString)
\f1\b0 \cf3 \
\
      \cf6 var\cf3  \cf2 String\cf3  source \cf7 =\cf3  Arduino.state.toString.split('_').get(\cf8 0\cf3 )\
      
\f0\b \cf2 //logInfo("Arduino.rules", "sourceString: " + source)
\f1\b0 \cf3 \
\
      \cf6 var\cf3  \cf2 String\cf3  condition \cf7 =\cf3   Arduino.state.toString.split('_').get(\cf8 1\cf3 )\
      
\f0\b \cf2 //logInfo("Arduino.rules", "conditionString: " + condition)
\f1\b0 \cf3 \
\
      
\f0\b \cf2 //var String temperature = Arduino.state.toString.split('_').get(2)
\f1\b0 \cf3 \
      
\f0\b \cf2 //logInfo("Arduino.rules", "temperatureString: " + temperature)
\f1\b0 \cf3 \
\
      \cf6 if\cf3 (source \cf7 ==\cf3  
\f0\b \cf5 "1"
\f1\b0 \cf3 )\{\
\
        Arduino_source.\cf6 postUpdate\cf3 (
\f0\b \cf5 "Tam"
\f1\b0 \cf3 )\
\
        Arduino_condition.\cf6 postUpdate\cf3 (condition)\
\
        
\f0\b \cf2 //Arduino_temperature.postUpdate(temperature)
\f1\b0 \cf3 \
      \}\
\
\
      \cf6 if\cf3 (source \cf7 ==\cf3  
\f0\b \cf5 "2"
\f1\b0 \cf3 )\{\
\
        Arduino_sourceB.\cf6 postUpdate\cf3 (
\f0\b \cf5 "DMD"
\f1\b0 \cf3 )\
\
        Arduino_conditionB.\cf6 postUpdate\cf3 (condition)\
\
        Arduino_temperatureB.\cf6 postUpdate\cf3 (temperature)\
      \}\
\
\
\
      \cf6 if\cf3 (source \cf7 ==\cf3  
\f0\b \cf5 "3"
\f1\b0 \cf3 )\{\
\
        Arduino_sourceC.\cf6 postUpdate\cf3 (
\f0\b \cf5 "Sand Ace"
\f1\b0 \cf3 )\
\
        Arduino_conditionC.\cf6 postUpdate\cf3 (condition)\
\
        
\f0\b \cf2 //Arduino_temperatureF.postUpdate(temperature)
\f1\b0 \cf3 \
      \}\
\
\
\
      \cf6 if\cf3 (source \cf7 ==\cf3  
\f0\b \cf5 "4"
\f1\b0 \cf3 )\{\
\
        Arduino_sourceD.\cf6 postUpdate\cf3 (
\f0\b \cf5 "Tripple Threat"
\f1\b0 \cf3 )\
\
        Arduino_conditionD.\cf6 postUpdate\cf3 (condition)\
\
        
\f0\b \cf2 //Arduino_temperatureF.postUpdate(temperature)
\f1\b0 \cf3 \
      \}\
\
\
      \cf6 if\cf3 (source \cf7 ==\cf3  
\f0\b \cf5 "5"
\f1\b0 \cf3 )\{\
\
        Arduino_sourceE.\cf6 postUpdate\cf3 (
\f0\b \cf5 "No Salad"
\f1\b0 \cf3 )\
\
        Arduino_conditionE.\cf6 postUpdate\cf3 (condition)\
\
        
\f0\b \cf2 //Arduino_temperatureF.postUpdate(temperature)
\f1\b0 \cf3 \
      \}\
\
\
\
      \cf6 if\cf3 (source \cf7 ==\cf3  
\f0\b \cf5 "6"
\f1\b0 \cf3 )\{\
\
        Arduino_sourceF.\cf6 postUpdate\cf3 (
\f0\b \cf5 "WIM"
\f1\b0 \cf3 )\
\
        Arduino_conditionF.\cf6 postUpdate\cf3 (condition)\
\
        
\f0\b \cf2 //Arduino_temperatureF.postUpdate(temperature)
\f1\b0 \cf3 \
      \}\
\
\
\
      \cf6 if\cf3 (source \cf7 ==\cf3  
\f0\b \cf5 "7"
\f1\b0 \cf3 )\{\
\
        Arduino_sourceG.\cf6 postUpdate\cf3 (
\f0\b \cf5 "MAT"
\f1\b0 \cf3 )\
\
        Arduino_conditionG.\cf6 postUpdate\cf3 (condition)\
\
        
\f0\b \cf2 //Arduino_temperatureF.postUpdate(temperature)
\f1\b0 \cf3 \
      \}\
\
\cf4 end\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b \cf2 //Define a rule for outgoing data
\f1\b0 \cf4 \
rule\cf3  
\f0\b \cf5 "Arduino_TX"
\f1\b0 \cf3 \
\
 \cf4 when\cf3 \
\
     \cf4 Item\cf3  Switch_A \cf4 changed\cf3  
\f0\b \cf2 //from OFF to ON
\f1\b0 \cf3 \
\
 \cf4 then\cf3 \
\
     
\f0\b \cf2 //define a variable for the state of the switch
\f1\b0 \cf3 \
     \cf6 var\cf3  switch_A_state \cf7 =\cf3  Switch_A.state as OnOffType\
\
     
\f0\b \cf2 //send the data to the arduino
\f1\b0 \cf3 \
     \cf6 sendCommand\cf3  (Arduino\cf7 ,\cf3  
\f0\b \cf5 "1_"
\f1\b0 \cf3  \cf7 +\cf3  switch_A_state \cf7 +\cf3  
\f0\b \cf5 "\\n"
\f1\b0 \cf3 )\
\
     
\f0\b \cf2 //send a log message to the OpenHab log viewer
\f1\b0 \cf3 \
     logInfo(
\f0\b \cf5 "Arduino.rules"
\f1\b0 \cf7 ,\cf3  
\f0\b \cf5 "Switch_A State: "
\f1\b0 \cf3  \cf7 +\cf3  Switch_A.state.toString)\
 \
 \cf4 end\cf3 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 rule\cf3  
\f0\b \cf5 "time_changes"
\f1\b0 \cf3 \
\
 \cf4 when\cf3 \
\
    \cf4 Item\cf3  Date \cf4 changed\cf3 \
 \
 \cf4 then\cf3 \
\
     
\f0\b \cf2 //define a variable for the state of the switch
\f1\b0 \cf3 \
     
\f0\b \cf2 //var switch_A_state = Switch_A.state as OnOffType
\f1\b0 \cf3 \
\
     \cf6 var\cf3  switch_A_state \cf7 =\cf3  
\f0\b \cf5 "GO"
\f1\b0 \cf3 \
\
     
\f0\b \cf2 //send the data to the arduino
\f1\b0 \cf3 \
     \cf6 sendCommand\cf3  (Arduino\cf7 ,\cf3  
\f0\b \cf5 "1_"
\f1\b0 \cf3  \cf7 +\cf3  switch_A_state \cf7 +\cf3  
\f0\b \cf5 "\\n"
\f1\b0 \cf3 )\
\
     \cf6 sendCommand\cf3  (Arduino\cf7 ,\cf3  
\f0\b \cf5 "4_"
\f1\b0 \cf3  \cf7 +\cf3  switch_A_state \cf7 +\cf3  
\f0\b \cf5 "\\n"
\f1\b0 \cf3 )\
\
     
\f0\b \cf2 //send a log message to the OpenHab log viewer
\f1\b0 \cf3 \
     logInfo(
\f0\b \cf5 "Arduino.rules"
\f1\b0 \cf7 ,\cf3  
\f0\b \cf5 "Switch_A State: "
\f1\b0 \cf3  \cf7 +\cf3  Switch_A.state.toString)\
\
 \cf4 end\cf3 \
}